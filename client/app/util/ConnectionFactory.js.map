{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","close","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAI,kBAAMA,SAAS,CAAC,aAAD,CAAf;;AAEA,gBAAIC,aAAa,IAAjB;;gBAEaC,iB,GAAN,MAAMA,iBAAN,CAAwB;AAC9BC,8BAAa;AACZ,0BAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACA;;AAED,uBAAOC,aAAP,GAAsB;AACf,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,4BAAGP,UAAH,EAAe,OAAOM,QAAQN,UAAR,CAAP;;AAEf,8BAAMQ,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,oCAAYG,eAAZ,GAA8BC,KAAK;AAC/BX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,yBAFD;;AAIAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;;AAEzBZ,yCAAaY,EAAEE,MAAF,CAASC,MAAtB;AACAf,uCAAWiB,KAAX,GAAmB,MAAM;AACrB,sCAAM,IAAId,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGAG,oCAAQM,EAAEE,MAAF,CAASC,MAAjB;AACH,yBAPD;;AASAP,oCAAYU,OAAZ,GAAsBN,KAAK;AACvBO,oCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAA3B;AACAf,mCAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,yBAHD;AAIH,qBAvBM,CAAP;AAwBH;;AAEJ,uBAAOT,aAAP,CAAqBb,UAArB,EAAiC;AAChCD,2BAAOwB,OAAP,CAAeC,SAAS;AACvB,4BAAGxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACCxB,WAAW2B,iBAAX,CAA6BH,KAA7B;;AAEDxB,mCAAW4B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAACK,eAAe,IAAhB,EAApC;AACA,qBALD;AAMA;;AAEE,uBAAOC,eAAP,GAAwB;AACpB,wBAAG9B,UAAH,EAAc;AACVA,mCAAWiB,KAAX;AACH;AACJ;AA7C0B,a","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\r\n\r\n    let connection = null;\r\n\r\n    export class ConnectionFactory {\r\n    \tconstructor(){\r\n    \t\tthrow new Error('Não é possível criar instâncias dessa classe');\r\n    \t}\r\n\r\n    \tstatic getConnection(){\r\n            return new Promise((resolve, reject) => {\r\n                \r\n                if(connection) return resolve(connection);\r\n\r\n                const openRequest = indexedDB.open('jscangaceiro', 2);\r\n                \r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n\r\n                    connection = e.target.result;\r\n                    connection.close = () => {\r\n                        throw new Error('Você não pode fechar diretamente a conexão');\r\n                    };\r\n                    resolve(e.target.result);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error.name)\r\n                    reject(e.target.error.name)\r\n                };\r\n            });\r\n        }\r\n\r\n    \tstatic _createStores(connection) {\r\n    \t\tstores.forEach(store => {\r\n    \t\t\tif(connection.objectStoreNames.contains(store))\r\n    \t\t\t\tconnection.deleteObjectStore(store);\t\t\t\r\n    \t\t\t\r\n    \t\t\tconnection.createObjectStore(store, {autoIncrement: true});\r\n    \t\t});\r\n    \t}\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                connection.close();\r\n            }\r\n        }\r\n    }\r\n"]}